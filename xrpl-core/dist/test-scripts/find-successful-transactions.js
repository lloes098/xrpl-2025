"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const xrpl_1 = require("xrpl");
/**
 * ÏÑ±Í≥µÌïú Ìä∏ÎûúÏû≠ÏÖòÏùÑ Ï∞æÏïÑÏÑú Ïò®Ï≤¥Ïù∏ Ìä∏ÎûòÏª§ÏóêÏÑú ÌôïÏù∏
 */
async function findSuccessfulTransactions() {
    console.log('üîç Finding successful transactions on XRPL Devnet...');
    const client = new xrpl_1.Client('wss://s.devnet.rippletest.net:51233');
    try {
        await client.connect();
        console.log('‚úÖ Connected to XRPL Devnet');
        // ÏÑ±Í≥µÌïú ÌîÑÎ°úÏ†ùÌä∏Ïùò Î∞úÌñâÏûê ÏßÄÍ∞ë Ï£ºÏÜåÎì§
        const issuerWallets = [
            'rK7qmv2HdrVVvQQkTQ3QYSZwewZFYfnYVP', // ÎßàÏßÄÎßâ ÏÑ±Í≥µÌïú ÌîÑÎ°úÏ†ùÌä∏
            'rnFmePVobKp7r8go9ud1fw1bLPTHyUqvhc',
            'rNiEa8rH4Y6AeHPf4nKVj3b89s9A5y1kZz',
            'r9rh9NWA6ywBTwcN5gpynays1f7nsyUPeH',
            'rp4WQbjLBaQgKFtZUfTBUKhw6D4vQwHxW2'
        ];
        for (const walletAddress of issuerWallets) {
            console.log(`\nüìä Checking wallet: ${walletAddress}`);
            try {
                // 1. Í≥ÑÏ†ï Ï†ïÎ≥¥ Ï°∞Ìöå
                const accountInfo = await client.request({
                    command: 'account_info',
                    account: walletAddress
                });
                console.log(`   ‚úÖ Account exists - Balance: ${accountInfo.result.account_data.Balance} drops`);
                console.log(`   - Sequence: ${accountInfo.result.account_data.Sequence}`);
                // 2. MPT ÌÜ†ÌÅ∞ Í∞ùÏ≤¥ Ï°∞Ìöå
                const mptObjects = await client.request({
                    command: 'account_objects',
                    account: walletAddress,
                    type: 'mptoken'
                });
                if (mptObjects.result.account_objects && mptObjects.result.account_objects.length > 0) {
                    console.log(`   ü™ô Found ${mptObjects.result.account_objects.length} MPT tokens:`);
                    mptObjects.result.account_objects.forEach((mpt, index) => {
                        console.log(`\n   ${index + 1}. MPT Token:`);
                        console.log(`      - Issuance ID: ${mpt.MPTokenIssuanceID}`);
                        console.log(`      - Maximum Amount: ${mpt.MaximumAmount}`);
                        console.log(`      - Asset Scale: ${mpt.AssetScale}`);
                        console.log(`      - Transfer Fee: ${mpt.TransferFee}`);
                        console.log(`      - Flags: ${mpt.Flags}`);
                        console.log(`      - Ledger Index: ${mpt.LedgerIndex}`);
                        // XRPL Devnet Explorer ÎßÅÌÅ¨ ÏÉùÏÑ±
                        const explorerUrl = `https://devnet.xrpl.org/objects/${mpt.index}`;
                        console.log(`      - Explorer: ${explorerUrl}`);
                    });
                }
                else {
                    console.log(`   ‚ùå No MPT tokens found`);
                }
                // 3. ÏµúÍ∑º Ìä∏ÎûúÏû≠ÏÖò Ï°∞Ìöå (Í∞ÑÎã®Ìïú Î∞©Î≤ï)
                try {
                    const accountTx = await client.request({
                        command: 'account_tx',
                        account: walletAddress,
                        limit: 5,
                        binary: false
                    });
                    if (accountTx.result.transactions && accountTx.result.transactions.length > 0) {
                        console.log(`   üìú Recent transactions (${accountTx.result.transactions.length}):`);
                        accountTx.result.transactions.forEach((tx, index) => {
                            console.log(`\n   ${index + 1}. Transaction:`);
                            console.log(`      - Hash: ${tx.tx_hash || 'N/A'}`);
                            console.log(`      - Ledger: ${tx.ledger_index || 'N/A'}`);
                            if (tx.tx) {
                                console.log(`      - Type: ${tx.tx.TransactionType || 'N/A'}`);
                                console.log(`      - Date: ${tx.tx.date ? new Date(tx.tx.date * 1000).toISOString() : 'N/A'}`);
                                if (tx.tx.TransactionType === 'MPTokenIssuanceCreate') {
                                    console.log(`      - MPT Issuance ID: ${tx.tx.MPTokenIssuanceID || 'N/A'}`);
                                }
                            }
                            // XRPL Devnet Explorer ÎßÅÌÅ¨ ÏÉùÏÑ±
                            if (tx.tx_hash) {
                                const explorerUrl = `https://devnet.xrpl.org/transactions/${tx.tx_hash}`;
                                console.log(`      - Explorer: ${explorerUrl}`);
                            }
                        });
                    }
                }
                catch (txError) {
                    console.log(`   ‚ö†Ô∏è Could not fetch transaction history: ${txError}`);
                }
            }
            catch (error) {
                console.log(`   ‚ùå Account not found or error: ${error}`);
            }
        }
        // 4. ÏµúÏã† ledgerÏóêÏÑú MPT ÌÜ†ÌÅ∞ Í≤ÄÏÉâ
        console.log('\nüîç Searching for MPT tokens in recent ledgers...');
        const serverInfo = await client.request({ command: 'server_info' });
        const currentLedger = serverInfo.result.info.validated_ledger?.seq || 0;
        console.log(`   Current ledger: ${currentLedger}`);
        // ÏµúÍ∑º 10Í∞ú ledgerÏóêÏÑú MPT ÌÜ†ÌÅ∞ Í≤ÄÏÉâ
        for (let i = 0; i < 10; i++) {
            const ledgerIndex = currentLedger - i;
            try {
                const ledgerData = await client.request({
                    command: 'ledger',
                    ledger_index: ledgerIndex,
                    transactions: true
                });
                if (ledgerData.result.ledger.transactions) {
                    const mptTransactions = ledgerData.result.ledger.transactions.filter((tx) => tx.TransactionType === 'MPTokenIssuanceCreate');
                    if (mptTransactions.length > 0) {
                        console.log(`\n   üéØ Found ${mptTransactions.length} MPT transactions in ledger ${ledgerIndex}:`);
                        mptTransactions.forEach((tx, index) => {
                            console.log(`\n   ${index + 1}. MPT Transaction:`);
                            console.log(`      - Hash: ${tx.hash || 'N/A'}`);
                            console.log(`      - Account: ${tx.Account || 'N/A'}`);
                            console.log(`      - MPT Issuance ID: ${tx.MPTokenIssuanceID || 'N/A'}`);
                            console.log(`      - Maximum Amount: ${tx.MaximumAmount || 'N/A'}`);
                            if (tx.hash) {
                                const explorerUrl = `https://devnet.xrpl.org/transactions/${tx.hash}`;
                                console.log(`      - Explorer: ${explorerUrl}`);
                            }
                        });
                    }
                }
            }
            catch (ledgerError) {
                // ÌäπÏ†ï ledgerÎ•º Ï∞æÏùÑ Ïàò ÏóÜÎäî Í≤ΩÏö∞ Î¨¥Ïãú
                continue;
            }
        }
    }
    catch (error) {
        console.error('‚ùå Error:', error);
    }
    finally {
        await client.disconnect();
        console.log('\nüîå Disconnected from Devnet');
    }
}
// Ïã§Ìñâ
findSuccessfulTransactions().catch(console.error);
//# sourceMappingURL=find-successful-transactions.js.map